// Spacing utilities
// Version 1.0.0
//
// Custom styles for spacing utilities.

// Padding main, commonly used for sections
// e.g. .py-main, .pt-main, .py-main-sm, .pb-main-sm, and so on
@each $size, $length in (main-sm: 1.25rem, main: 2.5rem) {
  .py-#{$size} {
    padding-top: $length;
    padding-bottom: $length;
    @include media-breakpoint-up(md) {
      padding-top: ($length * 2);
      padding-bottom: ($length * 2);
    }
  }
  .pt-#{$size} {
    padding-top: $length !important;
    @include media-breakpoint-up(md) {
      padding-top: ($length * 2) !important;
    }
  }
  .pb-#{$size} {
    padding-bottom: $length !important;
    @include media-breakpoint-up(md) {
      padding-bottom: ($length * 2) !important;
    }
  }
}

// Padding box, commonly used for box layout
.p-box {
  padding: ($spacer * 1.5);
  @include media-breakpoint-up(md) {
    padding: ($spacer * 2);
  }
}

// Margin & padding responsive utilities
// e.g. .mt-sm-down-1, .pr-md-down-2, .mx-sm-down-1, .py-md-down-2, and so on
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-down($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    @if $breakpoint != xxs {
      @each $prop, $abbrev in (margin: m, padding: p) {
        @each $size, $length in $spacers {
          .#{$abbrev}t#{$infix}-down-#{$size} {
            #{$prop}-top: $length !important;
          }
          .#{$abbrev}r#{$infix}-down-#{$size} {
            #{$prop}-right: $length !important;
          }
          .#{$abbrev}b#{$infix}-down-#{$size} {
            #{$prop}-bottom: $length !important;
          }
          .#{$abbrev}l#{$infix}-down-#{$size} {
            #{$prop}-left: $length !important;
          }
          .#{$abbrev}x#{$infix}-down-#{$size} {
            #{$prop}-left: $length !important;
            #{$prop}-right: $length !important;
          }
          .#{$abbrev}y#{$infix}-down-#{$size} {
            #{$prop}-top: $length !important;
            #{$prop}-bottom: $length !important;
          }
        }
      }
    }
  }
}

// Margin X responsive utilities for custom Button Group component children
// e.g. .mx-1 will give spacing to button children elements of 1 spacer,
//      .mx-10px will give spacing to button children elements of 10px, and so on
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    @each $prop, $abbrev in (margin: m) {
      @each $size, $length in $spacers {
        .btn-group.#{$abbrev}x#{$infix}-#{$size} {
          #{$prop}-left: 0 !important;
          #{$prop}-right: 0 !important;
          .btn {
            #{$prop}-left: $length !important;
            #{$prop}-right: $length !important;
            &:first-child {
              #{$prop}-left: 0 !important;
            }
            &:last-child {
              #{$prop}-right: 0 !important;
            }
          }
        }
      }
      @each $size, $length in $spacers-px {
        .btn-group.#{$abbrev}x#{$infix}-#{$size} {
          #{$prop}-left: 0 !important;
          #{$prop}-right: 0 !important;
          .btn {
            #{$prop}-left: $length !important;
            #{$prop}-right: $length !important;
            &:first-child {
              #{$prop}-left: 0 !important;
            }
            &:last-child {
              #{$prop}-right: 0 !important;
            }
          }
        }
      }
    }
  }
}

// Give additional utilities class of .d-sm-down-stacked
// When used on .btn-group, on sm down, the button children elements will be stacked
// and convert the margin given with .mx-* utilities to margin bottom
@include media-breakpoint-down(sm) {
  @each $prop, $abbrev in (margin: m) {
    @each $size, $length in $spacers {
      .btn-group.#{$abbrev}x-#{$size} {
        &.d-sm-down-stacked {
          align-items: flex-start;
          #{$prop}-left: 0 !important;
          #{$prop}-right: 0 !important;
          display: flex;
          flex-direction: column;
          .btn {
            #{$prop}-left: 0 !important;
            #{$prop}-right: 0 !important;
            #{$prop}-bottom: $length !important;
            &:last-child {
              #{$prop}-bottom: 0 !important;
            }
          }
        }
      }
    }
  }
  // If the parent element has class of .text-*, the stacked button will follow the styling
  .d-sm-down-stacked {
    align-items: flex-start; // Default value
  }
  .text-left {
    .d-sm-down-stacked,
    &.text-left {
      align-items: flex-start !important;
    }
  }
  .text-center {
    .d-sm-down-stacked,
    &.text-center {
      align-items: center !important;
    }
  }
  .text-right {
    .d-sm-down-stacked,
    &.text-right {
      align-items: flex-end !important;
    }
  }
}
